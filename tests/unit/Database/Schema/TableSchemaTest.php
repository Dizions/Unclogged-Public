<?php

declare(strict_types=1);

namespace Dizions\Unclogged\Database\Schema;

use Dizions\Unclogged\TestCase;

/**
 * @covers Dizions\Unclogged\Database\Schema\TableSchema
 */
final class TableSchemaTest extends TestCase
{
    public function testColumnListCanBeEmpty(): void
    {
        $schema = new TableSchema('name', []);
        $this->assertInstanceOf(TableSchema::class, $schema);
        $this->assertCount(0, $schema->getColumns());
    }

    public function testSingleColumnCanBeSpecified(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('name')]);
        $this->assertInstanceOf(TableSchema::class, $schema);
        $this->assertCount(1, $schema->getColumns());
    }

    public function testMultipleColumnsCanBeSpecified(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->assertInstanceOf(TableSchema::class, $schema);
        $this->assertCount(2, $schema->getColumns());
    }

    public function testSingleColumnPrimaryKeyCanBeAdded(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->assertSame(['id'], $schema->setPrimary(['id'])->getPrimary());
    }

    public function testCompositePrimaryKeyCanBeAdded(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->assertSame(['id', 'name'], $schema->setPrimary(['id', 'name'])->getPrimary());
    }

    public function testInvalidPrimaryKeyCannotBeAdded(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->expectException(InvalidTableSchemaException::class);
        $schema->setPrimary(['nonexistent']);
    }

    public function testSingleColumnIndexCanBeAdded(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->assertSame(
            [['name' => 'myindex', 'columns' => ['id']]],
            $schema->addIndex(['id'], 'myindex')->getIndexes()
        );
    }

    public function testCompositeIndexCanBeAdded(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->assertSame(
            [['name' => 'myindex', 'columns' => ['id', 'name']]],
            $schema->addIndex(['id', 'name'], 'myindex')->getIndexes()
        );
    }

    public function testIndexNameCanBeAutoGenerated(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->assertNotEmpty($schema->addIndex(['id', 'name'])->getIndexes()[0]['name']);
    }

    public function testInvalidIndexCannotBeAdded(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->expectException(InvalidTableSchemaException::class);
        $schema->addIndex(['nonexistent'], 'myindex');
    }

    public function testSingleColumnUniqueConstraintCanBeAdded(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->assertSame(
            [['name' => 'myunique', 'columns' => ['id']]],
            $schema->addUnique(['id'], 'myunique')->getUniqueConstraints()
        );
    }

    public function testCompositeUniqueConstraintCanBeAdded(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->assertSame(
            [['name' => 'myunique', 'columns' => ['id', 'name']]],
            $schema->addUnique(['id', 'name'], 'myunique')->getUniqueConstraints()
        );
    }

    public function testUniqueConstraintNameCanBeAutoGenerated(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->assertNotEmpty($schema->addUnique(['id', 'name'])->getUniqueConstraints()[0]['name']);
    }

    public function testInvalidUniqueConstraintCannotBeAdded(): void
    {
        $schema = new TableSchema('name', [new ColumnSchema('id'), new ColumnSchema('name')]);
        $this->expectException(InvalidTableSchemaException::class);
        $schema->addUnique(['nonexistent'], 'myunique');
    }

    public function testNameCanBeRetrieved(): void
    {
        $this->assertSame('name', (new TableSchema('name', []))->getName());
    }
}
